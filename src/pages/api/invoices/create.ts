// src/pages/api/invoices/create.ts
// src/pages/api/invoices/create.ts
import type { NextApiRequest, NextApiResponse } from "next";
import PDFDocument from "pdfkit";

// ----- types -----
type Party = { name: string; address?: string; email?: string };
type Line = { description: string; qty: number; unitPrice: number };
type InvoicePayload = {
  invoiceNumber: string;
  issuedAt: string; // ISO date
  currency: string; // "GBP", "USD", etc.
  company: Party;
  customer: Party & { id?: string };
  lines: Line[];
  notes?: string;
  email?: boolean;
};

// Allow JSON up to 1 MB
export const config = { api: { bodyParser: { sizeLimit: "1mb" } } };

// ----- pdf renderer -----
function drawInvoice(doc: PDFKit.PDFDocument, p: InvoicePayload) {
  const fmt = new Intl.NumberFormat("en-GB", {
    style: "currency",
    currency: p.currency || "GBP",
    minimumFractionDigits: 2,
  });

  doc.fontSize(22).text("INVOICE", { align: "right" }).moveDown(0.5);
  doc.fontSize(10).text(`Invoice # ${p.invoiceNumber}`, { align: "right" });
  doc.text(`Issued: ${new Date(p.issuedAt).toLocaleString()}`, { align: "right" });

  doc.moveDown();
  doc.fontSize(12).text(p.company.name, 50, 120);
  if (p.company.address) doc.fontSize(10).text(p.company.address);

  doc.moveDown().moveDown();
  doc.fontSize(12).text("Bill To:", 50);
  doc.fontSize(11).text(p.customer.name);
  if (p.customer.address) doc.fontSize(10).text(p.customer.address);

  doc.moveDown();
  doc.fontSize(12).text("Description", 50).text("Qty", 350).text("Unit", 400).text("Amount", 480);
  doc.moveTo(50, doc.y).lineTo(560, doc.y).stroke();

  let total = 0;
  doc.moveDown(0.3);
  p.lines.forEach((l) => {
    const amount = l.qty * l.unitPrice;
    total += amount;
    const y = doc.y;
    doc.fontSize(10).text(l.description, 50, y, { width: 280 });
    doc.text(String(l.qty), 350, y);
    doc.text(fmt.format(l.unitPrice), 400, y);
    doc.text(fmt.format(amount), 480, y);
    doc.moveDown(0.2);
  });

  doc.moveDown();
  doc.moveTo(400, doc.y).lineTo(560, doc.y).stroke();
  doc.fontSize(12).text("Total:", 400, doc.y + 4).text(fmt.format(total), 480, doc.y + 4);

  if (p.notes) {
    doc.moveDown().moveDown();
    doc.fontSize(10).text("Notes:", { underline: true });
    doc.text(p.notes);
  }

  doc.moveDown(2);
  doc.fontSize(9).fillColor("#666").text("Generated by FuelFlow", { align: "center" });
}

// ----- handler -----
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    // Simple health-check for the route
    return res.status(200).json({ ok: true, route: "/api/invoices/create" });
  }

  if (req.method !== "POST") {
    res.setHeader("Allow", "GET, POST");
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const payload = req.body as Partial<InvoicePayload> | undefined;
  if (!payload || !payload.invoiceNumber || !payload.issuedAt || !payload.company || !payload.customer || !payload.lines) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const chunks: Buffer[] = [];

    doc.on("data", (c) => chunks.push(Buffer.isBuffer(c) ? c : Buffer.from(c)));
    doc.on("end", () => {
      const pdf = Buffer.concat(chunks);
      res.setHeader("Content-Type", "application/pdf");
      res.setHeader(
        "Content-Disposition",
        (req.query.preview ? "inline" : "attachment") + `; filename="invoice-${payload.invoiceNumber}.pdf"`
      );
      res.setHeader("Content-Length", String(pdf.length));
      res.status(200).send(pdf);
    });

    // Render and finish
    drawInvoice(doc, payload as InvoicePayload);
    doc.end();
  } catch (e: any) {
    console.error(e);
    return res.status(500).json({ error: "Failed to generate PDF" });
  }
}
